name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y clang-11
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install cargo-deb
      run: cargo install cargo-deb
      
    - name: Build and package for Linux
      run: |
        make package_linux
        make package_debian
        
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: linux-artifacts
        path: |
          target/release/sam_linux_x86_64_*.tar.gz
          target/debian/*.deb
        retention-days: 1

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build and package for macOS
      run: make package_macos
      
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macos-artifacts
        path: target/release/sam_macos_x86_64_*.tar.gz
        retention-days: 1

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Linux artifacts
      uses: actions/download-artifact@v3
      with:
        name: linux-artifacts
        path: ./artifacts/
        
    - name: Download macOS artifacts
      uses: actions/download-artifact@v3
      with:
        name: macos-artifacts
        path: ./artifacts/
        
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.VERSION }}
        tag_name: ${{ steps.version.outputs.VERSION }}
        files: |
          artifacts/sam_linux_x86_64_*.tar.gz
          artifacts/sam_macos_x86_64_*.tar.gz
          artifacts/*.deb
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts/
        
    - name: Setup artifacts directory structure
      run: |
        # Move artifacts to expected locations
        mkdir -p target/x86_64-apple-darwin/release target/debian
        find artifacts/ -name "*_linux_x86_64_*.tar.gz" -exec cp {} target/release/ \;
        find artifacts/ -name "*_macos_x86_64_*.tar.gz" -exec cp {} target/x86_64-apple-darwin/release/ \;
        find artifacts/ -name "*.deb" -exec cp {} target/debian/ \;
        
    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y gettext-base
        
    - name: Setup Git for homebrew publishing
      run: |
        git config --global user.email "r.zenine@gmail.com"
        git config --global user.name "Ryad ZENINE"
        
    - name: Setup SSH key for homebrew repository
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.HOMEBREW_SSH_KEY }}
        
    - name: Publish packages
      run: ./.packaging/package_all.sh
      env:
        # Add any required environment variables for publishing
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}
