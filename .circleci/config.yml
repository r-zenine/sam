version: 2.1

commands: 
  setup_github_cli: 
    steps:
      - run: 
          name: make github cli too available
          command: |
            cd /tmp
            wget https://github.com/cli/cli/releases/download/v1.2.0/gh_1.2.0_linux_amd64.tar.gz
            tar -xvf gh_1.2.0_linux_amd64.tar.gz
            sudo cp /tmp/gh_1.2.0_linux_amd64/bin/gh /usr/local/bin/gh
            echo "$GITHUB_TOKEN" | gh auth login --with-token
            gh auth status

  save_cache_cmd: 
    steps: 
      - save_cache:
          key: sam-{{checksum "Cargo.toml"}}
          paths:
            - "~/.cargo"
            - "./target"

  restore_cache_cmd: 
    steps: 
      - restore_cache:
          key: sam-{{checksum "Cargo.toml"}}

  prepare_toolchain_linux: 
    steps: 
      - run: |
          rustup component add rustfmt clippy
          sudo apt update
          sudo apt install -y clang-11

  prepare_toolchain_macos: 
    steps: 
      # source: https://wapl.es/rust/2019/02/17/rust-cross-compile-linux-to-macos.html
      - run: |
          sudo apt update
          sudo apt install -y clang gcc g++ zlib1g-dev libmpc-dev libmpfr-dev libgmp-dev cmake libxml2-dev libssl-dev
          rustup target add x86_64-apple-darwin
          cd /tmp
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          wget -nc https://s3.dockerproject.org/darwin/v2/MacOSX10.10.sdk.tar.xz
          mv MacOSX10.10.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh

  package_linux:
    steps:
      - run:
          name: packaging for linux x64
          command: |
            make package_linux

  package_debian:
    steps:
      - run:
          name: packaging for linux x64 debian
          command: |
            cargo install cargo-deb
            make package_debian

  package_macos:
    steps:
      - run:
          name: packaging for linux x64
          command: |
            export PATH="/tmp/osxcross/target/bin:$PATH"
            make package_macos_cross


  create_release:
    steps:
      - run:
          name: packaging for linux x64
          command: make create_release

  publish_packages:
    steps:
      - run: 
          name: publishing packages.
          command: |
            sudo apt update
            sudo apt install -y gettext-base
            ./.packaging/package_all.sh

jobs:
  build:
    docker:
      - image: 'cimg/rust:1.47.0'
    steps:
      - checkout
      - restore_cache_cmd
      - prepare_toolchain_linux
      - package_linux
      - save_cache_cmd

  build_linux:
    docker:
      - image: 'cimg/rust:1.47.0'
    steps:
      - checkout
      - restore_cache_cmd
      - prepare_toolchain_linux
      - package_linux
      - package_debian
      - save_cache_cmd
      - persist_to_workspace:
          root: .
          paths:
            - ./target/release
            - ./target/debian

  build_macos:
    docker:
      - image: 'cimg/rust:1.47.0'
    steps:
      - checkout
      - restore_cache_cmd
      - prepare_toolchain_macos
      - package_macos
      - persist_to_workspace:
          root: .
          paths:
            - ./target/x86_64-apple-darwin

  create_release: 
    docker: 
      - image: 'cimg/rust:1.47.0'
    steps:
      - checkout
      - setup_github_cli
      - attach_workspace:
          at: .
      - create_release

  publish_packages:
    docker: 
      - image: cibuilds/snapcraft:stable
    steps: 
      - checkout
      - attach_workspace:
          at: .
      - publish_packages

workflows:
  build:
    jobs:
      - build:
          filters:
            tags:
              ignore: /^v.*/

  # Release related jobs.
  release:
    jobs:
      - build_linux:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: master

 # We cross compile for mac os only in the presence of tags.
      - build_macos:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: master
      # We publish a release only in the presence of tags.
      - create_release:
          requires:
            - build_linux
            - build_macos
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: master
      # publish to snap and homebrew
      - publish_packages:
          requires:
            - create_release
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: master
